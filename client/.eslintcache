[{"/Users/mac/Documents/github/IOdb/client/src/index.js":"1","/Users/mac/Documents/github/IOdb/client/src/App.js":"2","/Users/mac/Documents/github/IOdb/client/src/reportWebVitals.js":"3","/Users/mac/Documents/github/IOdb/client/src/Components/index.js":"4","/Users/mac/Documents/github/IOdb/client/src/styles/GlobalStyles.js":"5","/Users/mac/Documents/github/IOdb/client/src/styles/colors.js":"6","/Users/mac/Documents/github/IOdb/client/src/Components/Home/Home.js":"7","/Users/mac/Documents/github/IOdb/client/src/Components/Explore/Explore.js":"8","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot.js":"9","/Users/mac/Documents/github/IOdb/client/src/example_output/sample-output.js":"10","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/VolcanoPlot.js":"11","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot2.js":"12","/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/LinkButton.js":"13","/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/Layout.js":"14","/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/ActionButton.js":"15","/Users/mac/Documents/github/IOdb/client/src/Components/Navigation/Navigation.js":"16","/Users/mac/Documents/github/IOdb/client/src/Components/Footer/Footer.js":"17","/Users/mac/Documents/github/IOdb/client/src/styles/NavigationStyles.js":"18"},{"size":478,"mtime":1608246198645,"results":"19","hashOfConfig":"20"},{"size":657,"mtime":1610567163078,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1608246198645,"results":"22","hashOfConfig":"20"},{"size":164,"mtime":1610567163079,"results":"23","hashOfConfig":"20"},{"size":987,"mtime":1610567163080,"results":"24","hashOfConfig":"20"},{"size":163,"mtime":1610567163080,"results":"25","hashOfConfig":"20"},{"size":1856,"mtime":1610567163079,"results":"26","hashOfConfig":"20"},{"size":3970,"mtime":1610567163079,"results":"27","hashOfConfig":"20"},{"size":5737,"mtime":1610567163078,"results":"28","hashOfConfig":"20"},{"size":5636,"mtime":1610567163080,"results":"29","hashOfConfig":"20"},{"size":4922,"mtime":1610567163078,"results":"30","hashOfConfig":"20"},{"size":7542,"mtime":1610567163078,"results":"31","hashOfConfig":"20"},{"size":1098,"mtime":1608246198644,"results":"32","hashOfConfig":"20"},{"size":723,"mtime":1608246198644,"results":"33","hashOfConfig":"20"},{"size":1122,"mtime":1608246198644,"results":"34","hashOfConfig":"20"},{"size":864,"mtime":1608246198644,"results":"35","hashOfConfig":"20"},{"size":1482,"mtime":1608246198643,"results":"36","hashOfConfig":"20"},{"size":858,"mtime":1608246198645,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"uuqqq1",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mac/Documents/github/IOdb/client/src/index.js",[],["78","79"],"/Users/mac/Documents/github/IOdb/client/src/App.js",[],"/Users/mac/Documents/github/IOdb/client/src/reportWebVitals.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/index.js",[],"/Users/mac/Documents/github/IOdb/client/src/styles/GlobalStyles.js",[],"/Users/mac/Documents/github/IOdb/client/src/styles/colors.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Home/Home.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Explore/Explore.js",["80"],"import React, {useState} from 'react';\nimport Layout from '../UtilComponents/Layout';\nimport ActionButton from '../UtilComponents/ActionButton';\nimport ForestPlot from '../Diagram/ForestPlot2';\nimport VolcanoPlot from '../Diagram/VolcanoPlot';\nimport Select from 'react-select';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\nconst StyledForm = styled.div`\n    width: 60%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 30px;\n    .formField {\n        width: 250px;\n    }\n`\n\nconst StyledPlotArea = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n`\n\nconst StyledPlot = styled.div`\n    margin-top: 50px;\n`\n\nconst signatureOptions = [\n    'Woundhealing', \n    'Tcell_exclusion', \n    'Tcell_inflamed',\n    'TGFB_Mariathasan', \n    'TGFB_Thorsson', \n    'TIDE', \n    'TLS_sig',\n    'WNT_signaling', \n    'PTEN_loss', \n    'PDL1', \n    'NK_sig', \n    'LRRC15_CAF',\n    'IRG', 'IPS', \n    'IPRES', \n    'Inflammatory', \n    'IMPRES', \n    'ImmuneCells',\n    'Immune_sig', \n    'IFNG', \n    'Hypoxia', \n    'Essential_IO_genes',\n    'EMT_Thompson', \n    'EMT_Mak', \n    'CRMA', \n    'CYT', \n    'CD8', \n    'APM_Wang',\n    'APM_Thompson', \n    'Angiogenesis', \n    'ADO_Corvus', \n    'ADO_Astra', \n    'TIS'\n];\n\nconst outcomeOptions = ['OS', 'PFS', 'Response'];\n\nconst modelOptions = ['COX', 'DI', 'Log_regression'];\n\nconst Explore = () => {\n\n    const [volcanoPlotData, setVolcanoPlotData] = useState({data: {}, ready: false});\n    const [forestPlotData, setForestPlotData] = useState({data: {}, ready: false});\n    const [parameters, setParameters] = useState({\n        signature: '',\n        outcome: '',\n        model: ''\n    });\n\n    const getVolcanoPlotData = async () => {\n        setVolcanoPlotData({data: {}, ready: false});\n        setForestPlotData({data: {}, ready: false});\n        const res = await axios.post('/api/explore/volcano_plot', parameters);\n        setVolcanoPlotData({data: res.data, ready: true});\n    };\n\n    const getForestPlotData = async (params) => {\n        setForestPlotData({data: {}, ready: false}); // reset the data object so that the plot is redrawn.\n        const res = await axios.post('/api/explore/forest_plot', params);\n        console.log(res.data.individuals);\n        setForestPlotData({data: res.data, ready: true});\n    };\n\n    return(\n        <Layout>\n            <h2>Explore the pre-computed signature data</h2>\n            <StyledForm>\n                <div className='formField'>\n                    <Select \n                        options={outcomeOptions.map(option => ({value: option, label: option}))} \n                        onChange={(e) => {setParameters({...parameters, outcome: e.value})}} />\n                </div>\n                <div className='formField'>\n                    <Select \n                        options={modelOptions.map(option => ({value: option, label: option}))} \n                        onChange={(e) => {setParameters({...parameters, model: e.value})}} />\n                </div>\n                <div className='formField'>\n                    <ActionButton onClick={(e) => {getVolcanoPlotData()}} text='Submit' style={{width: '100px', height: '40px', fontSize: '14px'}} />\n                </div>\n            </StyledForm>\n            <StyledPlotArea>\n                <StyledPlot className='volcano'>\n                {\n                    volcanoPlotData.ready &&\n                    <VolcanoPlot plotId='volcano-plot' data={volcanoPlotData.data} getForestPlotData={getForestPlotData}/>\n                }\n                </StyledPlot>\n                <StyledPlot className='forest'>\n                {\n                    forestPlotData.ready &&\n                    <ForestPlot individuals={forestPlotData.data.individuals} meta={forestPlotData.data.meta} />\n                }\n                </StyledPlot>\n            </StyledPlotArea>\n        </Layout>\n    );\n}\n\nexport default Explore;\n","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot.js",["81","82","83","84","85","86","87"],"import React from \"react\";\nimport Layout from '../UtilComponents/Layout';\nimport styled from 'styled-components';\nimport studies from \"../../example_output/sample-output.js\";\nimport * as d3 from 'd3';\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\n\n\nconst StyledHome = styled.div`\n    width: 100%;\n    height: 100%;\n    margin-top: 40px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\n\nconst initial = {\n  svgWidth: 700,\n  svgHight: 700,\n  edgeSize: 10,\n  fontSize: 9,\n  xAxeMargin: 30,\n  topMargin: 20,\n  leftMargin: 200\n}\n\n/***\n * Get the dataset (studies + overall value)\n * keep the studies in data and the overall\n **/\nconst dataset = studies\n\n\nconst data = () => {\n  return dataset.filter((element) => {\n    return element.study != \"Meta-analysis\";\n  })\n}\n\n\nconst overall = studies[studies.length - 1]\n\n\n/***\n * Find the min and max value of all studies for adjusting the scales and axes\n ***/\n\nconst min_low = () => {\n  return Math.min(...dataset.map(function (d) {\n    return Number(d[\"95CI_low\"])\n  }))\n}\n\nconst max_high = () => {\n  return Math.max(...dataset.map(function (d) {\n    return Number(d[\"95CI_high\"])\n  }))\n}\n\n/***\n * Functions for scaling X and Y\n ***/\n\nconst xScale = (d) => {\n  const scale = d3\n    .scaleLinear()\n    .domain([min_low(), max_high()])\n    .range([initial.leftMargin, initial.leftMargin + 400])\n  return scale(d)\n}\n\nconst yScale = (d) => {\n  const scale = d3\n    .scaleLinear()\n    .domain([0, dataset.length + 1])\n    .range([20, 460])\n  return scale(d)\n}\n\n/***\n * Find the overall rhombus points on svg\n ***/\n\nconst polygonPoints = () => {\n  return (xScale(Number(overall[\"95CI_low\"])) + \", \" + yScale(dataset.length) + \" \" +\n    xScale(Number(overall[\"coef\"])) + \", \" + (yScale(dataset.length) - (initial.edgeSize / 2)) + \" \" +\n    xScale(Number(overall[\"95CI_high\"])) + \", \" + yScale(dataset.length) + \" \" +\n    xScale(Number(overall[\"coef\"])) + \", \" + (yScale(dataset.length) + (initial.edgeSize / 2)) + \" \")\n}\n\n/***\n *\n ***/\n\nconst xAxeTag = [min_low(), overall.coef, 1, max_high()];\n\n/***\n * Mouseover data point group (text+interval+rect)\n */\nconst renderTooltip = (d) => (\n  < div\nstyle = {\n{\n  fontSize:'12px', backgroundColor\n:\n  'rgba(242,255,223,0.95)', padding\n:\n  '2px 10px', color\n:\n  'rgb(7,28,44)', borderRadius\n:\n  3\n}\n}>\n{\n  studies[d].study + \" (\" + studies[d].Primary + \"; \" + studies[d].Sequencing + \"): \" +\n  \"N=\" + studies[d].N + \"; coef=\" + studies[d].coef + \"; P-value=\" + Number(studies[d].Pval).toFixed(4)\n}\n</div>\n)\n;\n\n/***\n * Creating the plot\n ***/\n\nconst ForestPlot = () => {\n  return (\n    <StyledHome>\n    < svg\n  height = \"800\"\n  width = \"800\" >\n    {/*Creating axes*/}\n    < g >\n    < line\n  id = {\"xAxe\"}\n  x1 = {xScale(min_low()\n)\n  -(initial.leftMargin * 2 / 3)\n}\n  y1 = {yScale(dataset.length + 1\n)\n}\n  x2 = {xScale(max_high()\n)\n  +initial.xAxeMargin\n}\n  y2 = {yScale(dataset.length + 1\n)\n}\n  stroke = \"#0C3544\"\n  strokeWidth = \"2\"\n    />\n    < line\n  id = {\"yAxe\"}\n  x1 = {xScale(1\n)\n}\n  y1 = {yScale( - 2\n)\n}\n  x2 = {xScale(1\n)\n}\n  y2 = {yScale(dataset.length + 1\n)\n}\n  stroke = \"#0C3544\"\n  strokeWidth = \"2\"\n    />\n    <line\n  strokeDasharray = \"3,4\"\n  id = {\"yAxe\"}\n  x1 = {xScale(overall.coef\n)\n}\n  y1 = {yScale( - 2\n)\n}\n  x2 = {xScale(overall.coef\n)\n}\n  y2 = {yScale(dataset.length + 1\n)\n}\n  stroke = \"#EF8020\"\n  strokeWidth = \"1\"\n    />\n    {\n      Object.keys(xAxeTag).map((key, index) =>\n        < text\n      id = {\"xTag-\"+index}\n      key = {key}\n      textAnchor = \"middle\"\n      x = {xScale(xAxeTag[index]\n)\n}\n  y = {yScale(dataset.length + 2\n)\n}\n  fontSize = {initial.fontSize}\n  fontWeight = \"bold\"\n  fill = \"#0C3544\"\n    >\n    {xAxeTag[index]}\n    </text>\n)\n}\n  {\n    Object.keys(xAxeTag).map((key, index) =>\n    <line\n    id = {\"xAxeDash\"+index}\n    key = {key}\n    x1 = {xScale(xAxeTag[index]\n  )\n  }\n    y1 = {yScale(dataset.length + 1\n  )\n    -5\n  }\n    x2 = {xScale(xAxeTag[index]\n  )\n  }\n    y2 = {yScale(dataset.length + 1\n  )\n    +5\n  }\n    stroke = \"#0C3544\"\n    strokeWidth = \"2\"\n      >\n      </line>\n  )\n  }\n</g>\n\n  {/*Creating Data Point*/\n  }\n\n  {\n    Object.keys(data()).map((key, index) =>\n    < React.Fragment >\n    < OverlayTrigger\n    placement = \"right\"\n    overlay = {renderTooltip(index)}\n    delay = {\n    {\n      show: 100, hide\n    :\n      200\n    }\n  }\n  >\n  <g\n    id = {\"datapoint-\" +index}\n    onClick = {() => console.log(index)}>\n    /*Tags*/\n  <text\n    id = {\"tag-\"+index}\n    key = {key}\n    x = {initial.leftMargin / 3}\n    y = {yScale(index) + 2\n  }\n    fontSize = {initial.fontSize}\n    fill = \"#0C3544\"\n      >\n      {dataset[key].study}({dataset[key].Primary}, {dataset[key].Sequencing})\n      </text>\n\n      /* Intervals */\n      < line\n    id = {\"interval-\"+index}\n    x1 = {xScale(Number(dataset[key][\"95CI_low\"])\n  )\n  }\n    y1 = {yScale(index)}\n    x2 = {xScale(Number(dataset[key][\"95CI_high\"])\n  )\n  }\n    y2 = {yScale(index)}\n    stroke = \"#73848E\"\n    strokeWidth = \"2\" >\n\n      <title>\n      95\n    CI:({data()[key][\"95CI_low\"]}, {data()[key][\"95CI_high\"]})\n    </title>\n    </line>\n\n    /*Data point marks*/\n    <rect\n    id = {\"datPoint-\" +index}\n    x = {xScale(Number(dataset[key][\"coef\"])\n  )\n    -initial.edgeSize / 2\n  }\n    y = {yScale(index) - initial.edgeSize / 2\n  }\n    width = {initial.edgeSize}\n    height = {initial.edgeSize}\n    fill = \"#236e96\" >\n      </rect>\n      </g>\n      </OverlayTrigger>\n      </React.Fragment>\n  )\n  }\n  {/*Creating Diamond*/\n  }\n<polygon\n  id = \"diamond\"\n  points = {polygonPoints()}\n  fill = \"#F2950B\"\n    >\n    </polygon>\n    </svg>\n    </StyledHome>\n)\n}\n\nexport default ForestPlot;\n","/Users/mac/Documents/github/IOdb/client/src/example_output/sample-output.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/VolcanoPlot.js",["88"],"/* eslint-disable radix */\nimport React, {useState, useEffect} from 'react';\nimport Plotly from 'plotly.js-dist';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport colors from '../../styles/colors';\n\nconst Plot = createPlotlyComponent(Plotly);\n\nconst VolcanoPlot = (props) => {\n    const {data, plotId} = props;\n\n    const [plotData, setPlotData] = useState({\n        x: [], \n        y: [], \n        hovertext: [], \n        pointColor: [],\n        pointSize: []\n    });\n\n    useEffect(() => {\n        console.log(data);\n        setPlotData({\n            x: data.map(item => (item.effect_size)),\n            y: data.map(item => (item.logPval)),\n            click_ids: data.map((item, i) => (i)),\n            hovertext: getHoverText(data),\n            pointColor: getPointColor(data),\n            pointSize: getPointSize(data)\n        });\n    }, []);\n\n    const onClick = (data) => {\n        let selectedPoint = props.data[data.points[0].data.click_ids[data.points[0].pointIndex]]\n        console.log(selectedPoint);\n        props.getForestPlotData({\n            signature: selectedPoint.signature, \n            outcome: selectedPoint.outcome, \n            model: selectedPoint.model\n        });\n    }\n\n    /**\n     * get data point sizes based on standard error value (se)\n     * @param {*} points \n     */\n    const getPointSize = (points) => {\n        let size = [];\n        points.forEach(point => {\n            if(point.se <= 0.05){\n                size.push(6);\n            }else if(point.se > 0.05 && point.se <= 0.1){\n                size.push(8);\n            }else if(point.se > 0.1 && point.se <= 0.15){\n                size.push(10);\n            }else if(point.se > 0.15){\n                size.push(12);\n            }\n        });\n        return size;\n    }\n\n    /**\n     * get data point color based on HR (effect size) value and -log10 p-value\n     * @param {*} points \n     */\n    const getPointColor = (points) => {\n        let pointColors = [];\n        points.forEach(point => {\n            if(point.logPval < -Math.log10(0.05)){\n                pointColors.push(colors.gray_text);\n            }else{\n                if(point.effect_size > 1){\n                    pointColors.push(colors.red);\n                }else{\n                    pointColors.push(colors.blue);\n                }\n            }\n        });\n        return pointColors;\n    }\n\n    /**\n     * get formatted hovertext for each data point.\n     * @param {*} points \n     */\n    const getHoverText = (points) => {\n        let hoverText = [];\n        points.forEach(point => {\n            hoverText.push(`Signature: ${point.signature}<br>Coef: ${Math.round(point.effect_size * 1000) / 1000}<br>P-value: ${Math.round(point.pval * 10000) / 10000}<br>I2: ${Math.round(point.i2 * 10000) / 10000}<br>P-value I2: ${Math.round(point.pval_i2 * 1000) / 1000}`)\n        });\n        return hoverText;\n    }\n\n    return(\n        <Plot\n            data={[\n                {\n                    showlegend: false,\n                    type: 'scatter',\n                    mode: 'markers',\n                    x: plotData.x,\n                    y: plotData.y,\n                    click_ids: plotData.click_ids,\n                    hoverinfo: 'text',\n                    hovertext: plotData.hovertext,\n                    marker: {\n                        color: plotData.pointColor,\n                        size: plotData.pointSize\n                    },\n                    name: 'points',\n                }\n            ]}\n            layout={{\n                height: 500,\n                autosize: true,\n                // width: 800,\n                paper_bgcolor: 'white',\n                plot_bgcolor: 'white',\n                orientation: 'v',\n                yaxis: { ticklen: 0, title: '-log10(p value)' },\n                xaxis: { title: 'Hazard Ratio', zeroline: false },\n                hovermode: 'closest',\n                font: {\n                    size: 14,\n                    family: 'Arial',\n                },\n                margin: {\n                    l: 45,\n                    r: 0,\n                    t: 0,\n                    b: 40,\n                },\n                shapes: [\n                    {\n                        type: 'line',\n                        xref: 'paper',\n                        x0: 0,\n                        y0: -Math.log10(0.05),\n                        x1: 1,\n                        y1: -Math.log10(0.05),\n                        line: {\n                            color: colors.light_gray,\n                            width: 2,\n                            dash: 'dot'\n                        }\n                    }\n                ]\n            }}\n            graphDiv={plotId}\n            config={{\n                responsive: true,\n                displayModeBar: false,\n            }}\n            onClick={(data) => onClick(data)}\n        />\n    );\n}\n\nexport default VolcanoPlot;","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot2.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/LinkButton.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/Layout.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/ActionButton.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Navigation/Navigation.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Footer/Footer.js",[],"/Users/mac/Documents/github/IOdb/client/src/styles/NavigationStyles.js",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":31,"column":7,"nodeType":"95","messageId":"96","endLine":31,"endColumn":23},{"ruleId":"93","severity":1,"message":"97","line":2,"column":8,"nodeType":"95","messageId":"96","endLine":2,"endColumn":14},{"ruleId":"93","severity":1,"message":"98","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":15},{"ruleId":"93","severity":1,"message":"99","line":7,"column":8,"nodeType":"95","messageId":"96","endLine":7,"endColumn":14},{"ruleId":"100","severity":1,"message":"101","line":41,"column":26,"nodeType":"102","messageId":"103","endLine":41,"endColumn":28},{"ruleId":"104","severity":1,"message":"105","line":260,"column":42,"nodeType":"106","endLine":262,"endColumn":3},{"ruleId":"104","severity":1,"message":"105","line":272,"column":14,"nodeType":"106","endLine":275,"endColumn":7},{"ruleId":"104","severity":1,"message":"105","line":292,"column":12,"nodeType":"106","endLine":295,"endColumn":5},{"ruleId":"107","severity":1,"message":"108","line":30,"column":8,"nodeType":"109","endLine":30,"endColumn":10,"suggestions":"110"},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'signatureOptions' is assigned a value but never used.","Identifier","unusedVar","'Layout' is defined but never used.","'Tooltip' is defined but never used.","'Button' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["113"],"no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},"Update the dependencies array to be: [data]",{"range":"116","text":"117"},[862,864],"[data]"]