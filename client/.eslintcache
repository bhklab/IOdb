[{"/Users/mac/Documents/github/IOdb/client/src/index.js":"1","/Users/mac/Documents/github/IOdb/client/src/App.js":"2","/Users/mac/Documents/github/IOdb/client/src/reportWebVitals.js":"3","/Users/mac/Documents/github/IOdb/client/src/Components/index.js":"4","/Users/mac/Documents/github/IOdb/client/src/styles/GlobalStyles.js":"5","/Users/mac/Documents/github/IOdb/client/src/styles/colors.js":"6","/Users/mac/Documents/github/IOdb/client/src/Components/Home/Home.js":"7","/Users/mac/Documents/github/IOdb/client/src/Components/Explore/Explore.js":"8","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot.js":"9","/Users/mac/Documents/github/IOdb/client/src/example_output/sample-output.js":"10","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/VolcanoPlot.js":"11","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot2.js":"12","/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/LinkButton.js":"13","/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/Layout.js":"14","/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/ActionButton.js":"15","/Users/mac/Documents/github/IOdb/client/src/Components/Navigation/Navigation.js":"16","/Users/mac/Documents/github/IOdb/client/src/Components/Footer/Footer.js":"17","/Users/mac/Documents/github/IOdb/client/src/styles/NavigationStyles.js":"18","/Users/mac/Documents/github/IOdb/client/src/Components/Explore/VolcanoPlotInput.js":"19","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot3.js":"20","/Users/mac/Documents/github/IOdb/client/src/Components/Explore/VolcanoPlotContainer.js":"21","/Users/mac/Documents/github/IOdb/client/src/Components/Explore/ForestPlotContainer.js":"22"},{"size":474,"mtime":1611606160577,"results":"23","hashOfConfig":"24"},{"size":504,"mtime":1611610036159,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1608246198645,"results":"26","hashOfConfig":"24"},{"size":164,"mtime":1610567163079,"results":"27","hashOfConfig":"24"},{"size":987,"mtime":1610567163080,"results":"28","hashOfConfig":"24"},{"size":222,"mtime":1611615486298,"results":"29","hashOfConfig":"24"},{"size":2398,"mtime":1611605573640,"results":"30","hashOfConfig":"24"},{"size":3000,"mtime":1611698582202,"results":"31","hashOfConfig":"24"},{"size":5737,"mtime":1610567163078,"results":"32","hashOfConfig":"24"},{"size":5636,"mtime":1610567163080,"results":"33","hashOfConfig":"24"},{"size":7672,"mtime":1611616629599,"results":"34","hashOfConfig":"24"},{"size":7991,"mtime":1611004839525,"results":"35","hashOfConfig":"24"},{"size":1098,"mtime":1608246198644,"results":"36","hashOfConfig":"24"},{"size":723,"mtime":1608246198644,"results":"37","hashOfConfig":"24"},{"size":1933,"mtime":1611074724526,"results":"38","hashOfConfig":"24"},{"size":908,"mtime":1611672527041,"results":"39","hashOfConfig":"24"},{"size":1482,"mtime":1608246198643,"results":"40","hashOfConfig":"24"},{"size":858,"mtime":1608246198645,"results":"41","hashOfConfig":"24"},{"size":5642,"mtime":1611609029492,"results":"42","hashOfConfig":"24"},{"size":10131,"mtime":1611699530581,"results":"43","hashOfConfig":"24"},{"size":1247,"mtime":1611674859052,"results":"44","hashOfConfig":"24"},{"size":7932,"mtime":1611698533853,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"uuqqq1",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mac/Documents/github/IOdb/client/src/index.js",[],["95","96"],"/Users/mac/Documents/github/IOdb/client/src/App.js",[],"/Users/mac/Documents/github/IOdb/client/src/reportWebVitals.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/index.js",[],"/Users/mac/Documents/github/IOdb/client/src/styles/GlobalStyles.js",[],"/Users/mac/Documents/github/IOdb/client/src/styles/colors.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Home/Home.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Explore/Explore.js",["97"],"/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot.js",["98","99","100","101","102","103","104"],"import React from \"react\";\nimport Layout from '../UtilComponents/Layout';\nimport styled from 'styled-components';\nimport studies from \"../../example_output/sample-output.js\";\nimport * as d3 from 'd3';\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\n\n\nconst StyledHome = styled.div`\n    width: 100%;\n    height: 100%;\n    margin-top: 40px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\n\nconst initial = {\n  svgWidth: 700,\n  svgHight: 700,\n  edgeSize: 10,\n  fontSize: 9,\n  xAxeMargin: 30,\n  topMargin: 20,\n  leftMargin: 200\n}\n\n/***\n * Get the dataset (studies + overall value)\n * keep the studies in data and the overall\n **/\nconst dataset = studies\n\n\nconst data = () => {\n  return dataset.filter((element) => {\n    return element.study != \"Meta-analysis\";\n  })\n}\n\n\nconst overall = studies[studies.length - 1]\n\n\n/***\n * Find the min and max value of all studies for adjusting the scales and axes\n ***/\n\nconst min_low = () => {\n  return Math.min(...dataset.map(function (d) {\n    return Number(d[\"95CI_low\"])\n  }))\n}\n\nconst max_high = () => {\n  return Math.max(...dataset.map(function (d) {\n    return Number(d[\"95CI_high\"])\n  }))\n}\n\n/***\n * Functions for scaling X and Y\n ***/\n\nconst xScale = (d) => {\n  const scale = d3\n    .scaleLinear()\n    .domain([min_low(), max_high()])\n    .range([initial.leftMargin, initial.leftMargin + 400])\n  return scale(d)\n}\n\nconst yScale = (d) => {\n  const scale = d3\n    .scaleLinear()\n    .domain([0, dataset.length + 1])\n    .range([20, 460])\n  return scale(d)\n}\n\n/***\n * Find the overall rhombus points on svg\n ***/\n\nconst polygonPoints = () => {\n  return (xScale(Number(overall[\"95CI_low\"])) + \", \" + yScale(dataset.length) + \" \" +\n    xScale(Number(overall[\"coef\"])) + \", \" + (yScale(dataset.length) - (initial.edgeSize / 2)) + \" \" +\n    xScale(Number(overall[\"95CI_high\"])) + \", \" + yScale(dataset.length) + \" \" +\n    xScale(Number(overall[\"coef\"])) + \", \" + (yScale(dataset.length) + (initial.edgeSize / 2)) + \" \")\n}\n\n/***\n *\n ***/\n\nconst xAxeTag = [min_low(), overall.coef, 1, max_high()];\n\n/***\n * Mouseover data point group (text+interval+rect)\n */\nconst renderTooltip = (d) => (\n  < div\nstyle = {\n{\n  fontSize:'12px', backgroundColor\n:\n  'rgba(242,255,223,0.95)', padding\n:\n  '2px 10px', color\n:\n  'rgb(7,28,44)', borderRadius\n:\n  3\n}\n}>\n{\n  studies[d].study + \" (\" + studies[d].Primary + \"; \" + studies[d].Sequencing + \"): \" +\n  \"N=\" + studies[d].N + \"; coef=\" + studies[d].coef + \"; P-value=\" + Number(studies[d].Pval).toFixed(4)\n}\n</div>\n)\n;\n\n/***\n * Creating the plot\n ***/\n\nconst ForestPlot = () => {\n  return (\n    <StyledHome>\n    < svg\n  height = \"800\"\n  width = \"800\" >\n    {/*Creating axes*/}\n    < g >\n    < line\n  id = {\"xAxe\"}\n  x1 = {xScale(min_low()\n)\n  -(initial.leftMargin * 2 / 3)\n}\n  y1 = {yScale(dataset.length + 1\n)\n}\n  x2 = {xScale(max_high()\n)\n  +initial.xAxeMargin\n}\n  y2 = {yScale(dataset.length + 1\n)\n}\n  stroke = \"#0C3544\"\n  strokeWidth = \"2\"\n    />\n    < line\n  id = {\"yAxe\"}\n  x1 = {xScale(1\n)\n}\n  y1 = {yScale( - 2\n)\n}\n  x2 = {xScale(1\n)\n}\n  y2 = {yScale(dataset.length + 1\n)\n}\n  stroke = \"#0C3544\"\n  strokeWidth = \"2\"\n    />\n    <line\n  strokeDasharray = \"3,4\"\n  id = {\"yAxe\"}\n  x1 = {xScale(overall.coef\n)\n}\n  y1 = {yScale( - 2\n)\n}\n  x2 = {xScale(overall.coef\n)\n}\n  y2 = {yScale(dataset.length + 1\n)\n}\n  stroke = \"#EF8020\"\n  strokeWidth = \"1\"\n    />\n    {\n      Object.keys(xAxeTag).map((key, index) =>\n        < text\n      id = {\"xTag-\"+index}\n      key = {key}\n      textAnchor = \"middle\"\n      x = {xScale(xAxeTag[index]\n)\n}\n  y = {yScale(dataset.length + 2\n)\n}\n  fontSize = {initial.fontSize}\n  fontWeight = \"bold\"\n  fill = \"#0C3544\"\n    >\n    {xAxeTag[index]}\n    </text>\n)\n}\n  {\n    Object.keys(xAxeTag).map((key, index) =>\n    <line\n    id = {\"xAxeDash\"+index}\n    key = {key}\n    x1 = {xScale(xAxeTag[index]\n  )\n  }\n    y1 = {yScale(dataset.length + 1\n  )\n    -5\n  }\n    x2 = {xScale(xAxeTag[index]\n  )\n  }\n    y2 = {yScale(dataset.length + 1\n  )\n    +5\n  }\n    stroke = \"#0C3544\"\n    strokeWidth = \"2\"\n      >\n      </line>\n  )\n  }\n</g>\n\n  {/*Creating Data Point*/\n  }\n\n  {\n    Object.keys(data()).map((key, index) =>\n    < React.Fragment >\n    < OverlayTrigger\n    placement = \"right\"\n    overlay = {renderTooltip(index)}\n    delay = {\n    {\n      show: 100, hide\n    :\n      200\n    }\n  }\n  >\n  <g\n    id = {\"datapoint-\" +index}\n    onClick = {() => console.log(index)}>\n    /*Tags*/\n  <text\n    id = {\"tag-\"+index}\n    key = {key}\n    x = {initial.leftMargin / 3}\n    y = {yScale(index) + 2\n  }\n    fontSize = {initial.fontSize}\n    fill = \"#0C3544\"\n      >\n      {dataset[key].study}({dataset[key].Primary}, {dataset[key].Sequencing})\n      </text>\n\n      /* Intervals */\n      < line\n    id = {\"interval-\"+index}\n    x1 = {xScale(Number(dataset[key][\"95CI_low\"])\n  )\n  }\n    y1 = {yScale(index)}\n    x2 = {xScale(Number(dataset[key][\"95CI_high\"])\n  )\n  }\n    y2 = {yScale(index)}\n    stroke = \"#73848E\"\n    strokeWidth = \"2\" >\n\n      <title>\n      95\n    CI:({data()[key][\"95CI_low\"]}, {data()[key][\"95CI_high\"]})\n    </title>\n    </line>\n\n    /*Data point marks*/\n    <rect\n    id = {\"datPoint-\" +index}\n    x = {xScale(Number(dataset[key][\"coef\"])\n  )\n    -initial.edgeSize / 2\n  }\n    y = {yScale(index) - initial.edgeSize / 2\n  }\n    width = {initial.edgeSize}\n    height = {initial.edgeSize}\n    fill = \"#236e96\" >\n      </rect>\n      </g>\n      </OverlayTrigger>\n      </React.Fragment>\n  )\n  }\n  {/*Creating Diamond*/\n  }\n<polygon\n  id = \"diamond\"\n  points = {polygonPoints()}\n  fill = \"#F2950B\"\n    >\n    </polygon>\n    </svg>\n    </StyledHome>\n)\n}\n\nexport default ForestPlot;\n","/Users/mac/Documents/github/IOdb/client/src/example_output/sample-output.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/VolcanoPlot.js",["105","106"],"/* eslint-disable radix */\nimport React, {useState, useEffect} from 'react';\nimport Plotly from 'plotly.js-dist';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport {withSize} from 'react-sizeme';\nimport colors from '../../styles/colors';\nimport * as d3 from 'd3';\n\nconst Plot = createPlotlyComponent(Plotly);\n\n// for changing the cursor on hover of points\nconst hover = () => {\n    d3.selectAll('.nsewdrag').style('cursor', 'pointer');\n};\n\nconst unhover = () => {\n    d3.selectAll('.nsewdrag').style('cursor', '');\n};\n\nconst VolcanoPlot = (props) => {\n    const {data, plotId, getForestPlotData, parameters, setParameters} = props;\n\n    const [plotData, setPlotData] = useState({\n        x: [], \n        y: [], \n        hovertext: [], \n        pointColor: [],\n        pointSize: []\n    });\n\n    const [selectedPointIndex, setSelectedPointIndex] = useState(null);\n\n    useEffect(() => {\n        console.log(data);\n        setPlotData({\n            x: data.map(item => (item.effect_size)),\n            y: data.map(item => (item.logPval)),\n            click_ids: data.map((item, i) => (i)),\n            hovertext: getHoverText(data),\n            pointColor: getPointColor(data),\n            pointSize: getPointSize(data),\n            pointLine: getPointOutline(data)\n        });\n    }, []);\n\n    useEffect(() => {\n        if(selectedPointIndex){\n            console.log(selectedPointIndex);\n            let pointColor = getPointColor(data, selectedPointIndex);\n            let pointLine = getPointOutline(data, selectedPointIndex);\n            setPlotData({\n                ...plotData, \n                pointColor: pointColor,\n                pointLine: pointLine\n            });\n        }\n    }, [selectedPointIndex]);\n\n    const onClick = (data) => {\n        let selectedPoint = props.data[data.points[0].pointIndex]\n        console.log(selectedPoint);\n        setSelectedPointIndex(data.points[0].pointIndex);\n        setParameters({...parameters, signature: selectedPoint.signature});\n        getForestPlotData({\n            signature: selectedPoint.signature, \n            outcome: selectedPoint.outcome, \n            model: selectedPoint.model\n        });\n    }\n\n    /**\n     * get data point sizes based on standard error value (se)\n     * @param {*} points \n     */\n    const getPointSize = (points) => {\n        let size = [];\n        points.forEach(point => {\n            if(point.se <= 0.05){\n                size.push(6);\n            }else if(point.se > 0.05 && point.se <= 0.1){\n                size.push(8);\n            }else if(point.se > 0.1 && point.se <= 0.15){\n                size.push(10);\n            }else if(point.se > 0.15){\n                size.push(12);\n            }\n        });\n        return size;\n    }\n\n    /**\n     * get data point color based on HR (effect size) value and -log10 p-value\n     * @param {*} points \n     */\n    const getPointColor = (points, index = null) => {\n        let pointColors = [];\n        for(let i = 0; i < points.length; i++){\n            if(i === index){\n                pointColors.push(colors.orange_highlight);\n                continue;\n            }\n\n            if(points[i].logPval < -Math.log10(0.05)){\n                pointColors.push(colors.gray_text);\n            }else{\n                if(points[i].effect_size > 0){\n                    pointColors.push(colors.red);\n                }else{\n                    pointColors.push(colors.blue);\n                }\n            }\n        }\n        return pointColors;\n    }\n\n    /**\n     * get data point outline.\n     * The outline is added if the point specified with the index is clicked.\n     * @param {*} points \n     * @param {*} index \n     */\n    const getPointOutline = (points, index=null) => {\n        let outlineColor = [];\n        let outlineWidth = [];\n        points.forEach((point, i) => {\n            if(i === index){\n                outlineColor.push(colors.gray_text);\n                outlineWidth.push(2);\n            }else{\n                outlineColor.push(undefined);\n                outlineWidth.push(0);\n            }\n        });\n        return { color: outlineColor, width: outlineWidth };\n    }\n\n    /**\n     * get formatted hovertext for each data point.\n     * @param {*} points \n     */\n    const getHoverText = (points) => {\n        let hoverText = [];\n        points.forEach(point => {\n            hoverText.push(\n            `Subgroup: ${point.subgroup}<br>Signature: ${point.signature}<br>Coef: ${Math.round(point.effect_size * 1000) / 1000}<br>P-value: ${Math.round(point.pval * 10000) / 10000}<br>I2: ${Math.round(point.i2 * 10000) / 10000}<br>P-value I2: ${Math.round(point.pval_i2 * 1000) / 1000}`)\n        });\n        return hoverText;\n    }\n\n    return(\n        <div>\n            <Plot\n                data={[\n                    {\n                        showlegend: false,\n                        type: 'scatter',\n                        mode: 'markers',\n                        x: plotData.x,\n                        y: plotData.y,\n                        click_ids: plotData.click_ids,\n                        hoverinfo: 'text',\n                        hovertext: plotData.hovertext,\n                        marker: {\n                            color: plotData.pointColor,\n                            size: plotData.pointSize,\n                            line: plotData.pointLine\n                        },\n                        name: 'points',\n                    }\n                ]}\n                layout={{\n                    width: props.size.width,\n                    autosize: true,\n                    paper_bgcolor: 'white',\n                    plot_bgcolor: 'white',\n                    orientation: 'v',\n                    yaxis: { ticklen: 0, title: '-log10(p value)' },\n                    xaxis: { title: 'Hazard Ratio', zeroline: false },\n                    hovermode: 'closest',\n                    font: {\n                        size: 14,\n                        family: 'Arial',\n                    },\n                    margin: {\n                        l: 45,\n                        r: 10,\n                        t: 10,\n                        b: 40,\n                    },\n                    shapes: [\n                        {\n                            type: 'line',\n                            xref: 'paper',\n                            x0: 0,\n                            y0: -Math.log10(0.05),\n                            x1: 1,\n                            y1: -Math.log10(0.05),\n                            line: {\n                                color: colors.light_gray,\n                                width: 2,\n                                dash: 'dot'\n                            }\n                        },\n                        {\n                            type: 'line',\n                            xref: 'x',\n                            yref: 'paper',\n                            x0: 0,\n                            y0: 0,\n                            x1: 0,\n                            y1: 1,\n                            line: {\n                                color: colors.light_gray,\n                                width: 2,\n                                dash: 'dot'\n                            }\n                        }\n                    ]\n                }}\n                graphDiv={plotId}\n                config={{\n                    responsive: true,\n                    displayModeBar: false,\n                }}\n                onClick={(data) => onClick(data)}\n                onHover={() => hover()}\n                onUnhover={() => unhover()}\n            />\n        </div>\n    );\n}\n\nexport default withSize()(VolcanoPlot);","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot2.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/LinkButton.js",[],["107","108"],"/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/Layout.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/ActionButton.js",["109"],"import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport colors from '../../styles/colors';\n\nconst StyledButton = styled.button`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 5px;\n    border: none;\n    font-weight: bold;\n    letter-spacing: 2px;\n    width: ${props => props.style.width ? props.style.width : '45%'};\n    height: ${props => props.style.height ? props.style.height : '80px'};\n    background-color: ${props => props.disabled ? colors.light_gray : props.color.background};\n    font-size: ${props => props.style.fontSize ? props.style.fontSize : '20px'};\n    color: ${props => props.style.fontColor ? props.style.fontColor : '#ffffff'};\n    cursor: ${props => props.disabled ? 'default' : 'pointer'};\n\n    :hover {\n        background-color: ${ props => props.disabled ? colors.light_gray : props.color.hover };\n        outline: ${ props => props.color.hover };\n    }\n`;\n\nconst ActionButton = (props) => {\n    const {onClick, text, style} = props;\n    const [colorScheme, setColorScheme] = useState({\n        background: colors.blue,\n        hover: colors.hover_blue,\n        ready: false\n    });\n\n    useEffect(() =>{\n        switch(props.type) {\n            case 'reset':\n                setColorScheme({\n                    background: colors.red,\n                    hover: colors.hover_red,\n                    ready: true\n                });\n                break;\n            default:\n                setColorScheme({...colorScheme, ready: true});\n                break;\n        }\n    }, []);\n\n    return (\n        <React.Fragment>\n            {\n                colorScheme.ready &&\n                <StyledButton onClick={onClick} color={colorScheme} style={style} disabled={props.disabled} >\n                    {text}\n                </StyledButton>\n            }\n        </React.Fragment>\n    );\n}\n\nexport default ActionButton;","/Users/mac/Documents/github/IOdb/client/src/Components/Navigation/Navigation.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Footer/Footer.js",[],"/Users/mac/Documents/github/IOdb/client/src/styles/NavigationStyles.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Explore/VolcanoPlotInput.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot3.js",["110"],"/Users/mac/Documents/github/IOdb/client/src/Components/Explore/VolcanoPlotContainer.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Explore/ForestPlotContainer.js",["111","112","113"],{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":47,"column":8,"nodeType":"120","endLine":47,"endColumn":10,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":2,"column":8,"nodeType":"124","messageId":"125","endLine":2,"endColumn":14},{"ruleId":"122","severity":1,"message":"126","line":6,"column":8,"nodeType":"124","messageId":"125","endLine":6,"endColumn":15},{"ruleId":"122","severity":1,"message":"127","line":7,"column":8,"nodeType":"124","messageId":"125","endLine":7,"endColumn":14},{"ruleId":"128","severity":1,"message":"129","line":41,"column":26,"nodeType":"130","messageId":"131","endLine":41,"endColumn":28},{"ruleId":"132","severity":1,"message":"133","line":260,"column":42,"nodeType":"134","endLine":262,"endColumn":3},{"ruleId":"132","severity":1,"message":"133","line":272,"column":14,"nodeType":"134","endLine":275,"endColumn":7},{"ruleId":"132","severity":1,"message":"133","line":292,"column":12,"nodeType":"134","endLine":295,"endColumn":5},{"ruleId":"118","severity":1,"message":"135","line":44,"column":8,"nodeType":"120","endLine":44,"endColumn":10,"suggestions":"136"},{"ruleId":"118","severity":1,"message":"137","line":57,"column":8,"nodeType":"120","endLine":57,"endColumn":28,"suggestions":"138"},{"ruleId":"114","replacedBy":"139"},{"ruleId":"116","replacedBy":"140"},{"ruleId":"118","severity":1,"message":"141","line":47,"column":8,"nodeType":"120","endLine":47,"endColumn":10,"suggestions":"142"},{"ruleId":"118","severity":1,"message":"143","line":36,"column":8,"nodeType":"120","endLine":36,"endColumn":45,"suggestions":"144"},{"ruleId":"118","severity":1,"message":"145","line":95,"column":8,"nodeType":"120","endLine":95,"endColumn":10,"suggestions":"146"},{"ruleId":"128","severity":1,"message":"129","line":114,"column":87,"nodeType":"130","messageId":"131","endLine":114,"endColumn":89},{"ruleId":"118","severity":1,"message":"147","line":133,"column":8,"nodeType":"120","endLine":133,"endColumn":42,"suggestions":"148"},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getVolcanoPlotData'. Either include it or remove the dependency array.","ArrayExpression",["151"],"no-unused-vars","'Layout' is defined but never used.","Identifier","unusedVar","'Tooltip' is defined but never used.","'Button' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["152"],"React Hook useEffect has missing dependencies: 'data' and 'plotData'. Either include them or remove the dependency array. You can also do a functional update 'setPlotData(p => ...)' if you only need 'plotData' in the 'setPlotData' call.",["153"],["149"],["150"],"React Hook useEffect has missing dependencies: 'colorScheme' and 'props.type'. Either include them or remove the dependency array. You can also do a functional update 'setColorScheme(c => ...)' if you only need 'colorScheme' in the 'setColorScheme' call.",["154"],"React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["155"],"React Hook useEffect has missing dependencies: 'forestPlotData.data.individuals', 'forestPlotData.data.meta', and 'sort.value'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPlotdata' needs the current value of 'sort.value'.",["156"],"React Hook useEffect has missing dependencies: 'forestPlotData.data.individuals', 'sequenceOptions', and 'tissueOptions'. Either include them or remove the dependency array.",["157"],"no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [getVolcanoPlotData]",{"range":"172","text":"173"},"Update the dependencies array to be: [data]",{"range":"174","text":"175"},"Update the dependencies array to be: [data, plotData, selectedPointIndex]",{"range":"176","text":"177"},"Update the dependencies array to be: [colorScheme, props.type]",{"range":"178","text":"179"},"Update the dependencies array to be: [props.size.width, props.individuals, draw]",{"range":"180","text":"181"},"Update the dependencies array to be: [forestPlotData.data.individuals, forestPlotData.data.meta, sort.value]",{"range":"182","text":"183"},"Update the dependencies array to be: [sort, tissueValue, sequenceValue, forestPlotData.data.individuals, sequenceOptions, tissueOptions]",{"range":"184","text":"185"},[1511,1513],"[getVolcanoPlotData]",[1301,1303],"[data]",[1713,1733],"[data, plotData, selectedPointIndex]",[1591,1593],"[colorScheme, props.type]",[836,873],"[props.size.width, props.individuals, draw]",[2854,2856],"[forestPlotData.data.individuals, forestPlotData.data.meta, sort.value]",[4468,4502],"[sort, tissueValue, sequenceValue, forestPlotData.data.individuals, sequenceOptions, tissueOptions]"]