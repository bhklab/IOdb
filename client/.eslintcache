[{"/Users/mac/Documents/github/IOdb/client/src/index.js":"1","/Users/mac/Documents/github/IOdb/client/src/App.js":"2","/Users/mac/Documents/github/IOdb/client/src/reportWebVitals.js":"3","/Users/mac/Documents/github/IOdb/client/src/Components/index.js":"4","/Users/mac/Documents/github/IOdb/client/src/styles/GlobalStyles.js":"5","/Users/mac/Documents/github/IOdb/client/src/styles/colors.js":"6","/Users/mac/Documents/github/IOdb/client/src/Components/Home/Home.js":"7","/Users/mac/Documents/github/IOdb/client/src/Components/Explore/Explore.js":"8","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot.js":"9","/Users/mac/Documents/github/IOdb/client/src/example_output/sample-output.js":"10","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/VolcanoPlot.js":"11","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot2.js":"12","/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/LinkButton.js":"13","/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/Layout.js":"14","/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/ActionButton.js":"15","/Users/mac/Documents/github/IOdb/client/src/Components/Navigation/Navigation.js":"16","/Users/mac/Documents/github/IOdb/client/src/Components/Footer/Footer.js":"17","/Users/mac/Documents/github/IOdb/client/src/styles/NavigationStyles.js":"18","/Users/mac/Documents/github/IOdb/client/src/Components/Explore/VolcanoPlotInput.js":"19","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot3.js":"20","/Users/mac/Documents/github/IOdb/client/src/Components/Explore/VolcanoPlotContainer.js":"21","/Users/mac/Documents/github/IOdb/client/src/Components/Explore/ForestPlotContainer.js":"22","/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/CustomSelect.js":"23"},{"size":618,"mtime":1612827815615,"results":"24","hashOfConfig":"25"},{"size":504,"mtime":1611610036159,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1608246198645,"results":"27","hashOfConfig":"25"},{"size":164,"mtime":1610567163079,"results":"28","hashOfConfig":"25"},{"size":987,"mtime":1610567163080,"results":"29","hashOfConfig":"25"},{"size":222,"mtime":1611615486298,"results":"30","hashOfConfig":"25"},{"size":2407,"mtime":1612829721425,"results":"31","hashOfConfig":"25"},{"size":3869,"mtime":1612202254282,"results":"32","hashOfConfig":"25"},{"size":5737,"mtime":1610567163078,"results":"33","hashOfConfig":"25"},{"size":5636,"mtime":1610567163080,"results":"34","hashOfConfig":"25"},{"size":7728,"mtime":1611705811576,"results":"35","hashOfConfig":"25"},{"size":7991,"mtime":1611004839525,"results":"36","hashOfConfig":"25"},{"size":1098,"mtime":1608246198644,"results":"37","hashOfConfig":"25"},{"size":723,"mtime":1608246198644,"results":"38","hashOfConfig":"25"},{"size":1937,"mtime":1611704063961,"results":"39","hashOfConfig":"25"},{"size":908,"mtime":1611672527041,"results":"40","hashOfConfig":"25"},{"size":1482,"mtime":1608246198643,"results":"41","hashOfConfig":"25"},{"size":858,"mtime":1608246198645,"results":"42","hashOfConfig":"25"},{"size":7557,"mtime":1612831369123,"results":"43","hashOfConfig":"25"},{"size":10137,"mtime":1611706185779,"results":"44","hashOfConfig":"25"},{"size":1355,"mtime":1611704837246,"results":"45","hashOfConfig":"25"},{"size":7684,"mtime":1612203663133,"results":"46","hashOfConfig":"25"},{"size":1148,"mtime":1612823855228,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"uuqqq1",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/mac/Documents/github/IOdb/client/src/index.js",[],["102","103"],"/Users/mac/Documents/github/IOdb/client/src/App.js",[],"/Users/mac/Documents/github/IOdb/client/src/reportWebVitals.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/index.js",[],"/Users/mac/Documents/github/IOdb/client/src/styles/GlobalStyles.js",[],"/Users/mac/Documents/github/IOdb/client/src/styles/colors.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Home/Home.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Explore/Explore.js",["104"],"import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport Loader from 'react-loader-spinner';\n\nimport ForestPlotContainer from './ForestPlotContainer';\nimport VolcanoPlotInput from './VolcanoPlotInput';\nimport VolcanoPlotContainer from './VolcanoPlotContainer';\nimport colors from '../../styles/colors';\n\nconst ExploreContainer = styled.div`\n    width: 100%;\n`;\n\nconst PlotContainer = styled.div`\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    .volcano {\n        width: 35%;\n    }\n    .forest {\n        width: 65%;\n    }\n`;\n\nconst StyledPlotArea = styled.div`\n    width: ${props => props.width};\n    // min-width: 400px;\n    padding 10px;\n`;\n\nconst LoaderContainer = styled.div`\n    width: 100%;\n    height: 500px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst Explore = (props) => {\n\n    const {parameters, setParameters} = props;\n    \n    const [volcanoPlotData, setVolcanoPlotData] = useState({data: {}, ready: false});\n    const [forestPlotData, setForestPlotData] = useState({data: {}, loading: false, ready: false});\n\n    const getVolcanoPlotData = async () => {\n        setVolcanoPlotData({data: {}, ready: false}); // reset the data object so that the plot is redrawn.\n        setForestPlotData({data: {}, loading: false, ready: false}); \n        const res = await axios.post('/api/explore/volcano_plot', parameters);\n        setVolcanoPlotData({data: res.data, ready: true});\n    };\n\n    const getForestPlotData = async (params) => {\n        setForestPlotData({data: {}, loading: true, ready: false}); // reset the data object so that the plot is redrawn.\n        const res = await axios.post('/api/explore/forest_plot', params);\n        console.log(res.data);\n        setForestPlotData({data: res.data, loading: false, ready: true});\n    };\n\n    useEffect(() => {\n        getVolcanoPlotData();\n    }, []);\n\n    return(\n        <ExploreContainer>\n            <h3>Explore pre-computed signature data</h3>\n            <VolcanoPlotInput \n                parameters={parameters} \n                setParameters={setParameters} \n                onSubmit={getVolcanoPlotData} \n                flexDirection='row' \n                resetButton={true} \n                onReset={() => {window.location.reload()}} />\n            <PlotContainer>\n                <StyledPlotArea width='40%'>\n                {\n                    volcanoPlotData.ready ?\n                    <VolcanoPlotContainer \n                        parameters={parameters} \n                        setParameters={setParameters} \n                        volcanoPlotData={volcanoPlotData} \n                        getForestPlotData={getForestPlotData} \n                    />\n                    :\n                    <LoaderContainer>\n                        <Loader type=\"Oval\" color={colors.blue} height={80} width={80}/>\n                    </LoaderContainer>\n                }\n                </StyledPlotArea>\n                <StyledPlotArea width='60%'>\n                {\n                    forestPlotData.ready ?\n                    <ForestPlotContainer parameters={parameters} forestPlotData={forestPlotData} />\n                    :\n                    forestPlotData.loading ?\n                        <LoaderContainer>\n                            <Loader type=\"Oval\" color={colors.blue} height={80} width={80}/>\n                        </LoaderContainer>\n                        :\n                        <div>\n                            <h3>Forest Plot</h3>\n                            <div>Click on a signature point on the volcano plot to display a corresponding forest plot.</div>\n                        </div>\n                }\n                </StyledPlotArea>\n            </PlotContainer>\n        </ExploreContainer>\n    );\n}\n\nexport default Explore;\n","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot.js",["105","106","107","108","109","110","111"],"import React from \"react\";\nimport Layout from '../UtilComponents/Layout';\nimport styled from 'styled-components';\nimport studies from \"../../example_output/sample-output.js\";\nimport * as d3 from 'd3';\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\n\n\nconst StyledHome = styled.div`\n    width: 100%;\n    height: 100%;\n    margin-top: 40px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`;\n\n\nconst initial = {\n  svgWidth: 700,\n  svgHight: 700,\n  edgeSize: 10,\n  fontSize: 9,\n  xAxeMargin: 30,\n  topMargin: 20,\n  leftMargin: 200\n}\n\n/***\n * Get the dataset (studies + overall value)\n * keep the studies in data and the overall\n **/\nconst dataset = studies\n\n\nconst data = () => {\n  return dataset.filter((element) => {\n    return element.study != \"Meta-analysis\";\n  })\n}\n\n\nconst overall = studies[studies.length - 1]\n\n\n/***\n * Find the min and max value of all studies for adjusting the scales and axes\n ***/\n\nconst min_low = () => {\n  return Math.min(...dataset.map(function (d) {\n    return Number(d[\"95CI_low\"])\n  }))\n}\n\nconst max_high = () => {\n  return Math.max(...dataset.map(function (d) {\n    return Number(d[\"95CI_high\"])\n  }))\n}\n\n/***\n * Functions for scaling X and Y\n ***/\n\nconst xScale = (d) => {\n  const scale = d3\n    .scaleLinear()\n    .domain([min_low(), max_high()])\n    .range([initial.leftMargin, initial.leftMargin + 400])\n  return scale(d)\n}\n\nconst yScale = (d) => {\n  const scale = d3\n    .scaleLinear()\n    .domain([0, dataset.length + 1])\n    .range([20, 460])\n  return scale(d)\n}\n\n/***\n * Find the overall rhombus points on svg\n ***/\n\nconst polygonPoints = () => {\n  return (xScale(Number(overall[\"95CI_low\"])) + \", \" + yScale(dataset.length) + \" \" +\n    xScale(Number(overall[\"coef\"])) + \", \" + (yScale(dataset.length) - (initial.edgeSize / 2)) + \" \" +\n    xScale(Number(overall[\"95CI_high\"])) + \", \" + yScale(dataset.length) + \" \" +\n    xScale(Number(overall[\"coef\"])) + \", \" + (yScale(dataset.length) + (initial.edgeSize / 2)) + \" \")\n}\n\n/***\n *\n ***/\n\nconst xAxeTag = [min_low(), overall.coef, 1, max_high()];\n\n/***\n * Mouseover data point group (text+interval+rect)\n */\nconst renderTooltip = (d) => (\n  < div\nstyle = {\n{\n  fontSize:'12px', backgroundColor\n:\n  'rgba(242,255,223,0.95)', padding\n:\n  '2px 10px', color\n:\n  'rgb(7,28,44)', borderRadius\n:\n  3\n}\n}>\n{\n  studies[d].study + \" (\" + studies[d].Primary + \"; \" + studies[d].Sequencing + \"): \" +\n  \"N=\" + studies[d].N + \"; coef=\" + studies[d].coef + \"; P-value=\" + Number(studies[d].Pval).toFixed(4)\n}\n</div>\n)\n;\n\n/***\n * Creating the plot\n ***/\n\nconst ForestPlot = () => {\n  return (\n    <StyledHome>\n    < svg\n  height = \"800\"\n  width = \"800\" >\n    {/*Creating axes*/}\n    < g >\n    < line\n  id = {\"xAxe\"}\n  x1 = {xScale(min_low()\n)\n  -(initial.leftMargin * 2 / 3)\n}\n  y1 = {yScale(dataset.length + 1\n)\n}\n  x2 = {xScale(max_high()\n)\n  +initial.xAxeMargin\n}\n  y2 = {yScale(dataset.length + 1\n)\n}\n  stroke = \"#0C3544\"\n  strokeWidth = \"2\"\n    />\n    < line\n  id = {\"yAxe\"}\n  x1 = {xScale(1\n)\n}\n  y1 = {yScale( - 2\n)\n}\n  x2 = {xScale(1\n)\n}\n  y2 = {yScale(dataset.length + 1\n)\n}\n  stroke = \"#0C3544\"\n  strokeWidth = \"2\"\n    />\n    <line\n  strokeDasharray = \"3,4\"\n  id = {\"yAxe\"}\n  x1 = {xScale(overall.coef\n)\n}\n  y1 = {yScale( - 2\n)\n}\n  x2 = {xScale(overall.coef\n)\n}\n  y2 = {yScale(dataset.length + 1\n)\n}\n  stroke = \"#EF8020\"\n  strokeWidth = \"1\"\n    />\n    {\n      Object.keys(xAxeTag).map((key, index) =>\n        < text\n      id = {\"xTag-\"+index}\n      key = {key}\n      textAnchor = \"middle\"\n      x = {xScale(xAxeTag[index]\n)\n}\n  y = {yScale(dataset.length + 2\n)\n}\n  fontSize = {initial.fontSize}\n  fontWeight = \"bold\"\n  fill = \"#0C3544\"\n    >\n    {xAxeTag[index]}\n    </text>\n)\n}\n  {\n    Object.keys(xAxeTag).map((key, index) =>\n    <line\n    id = {\"xAxeDash\"+index}\n    key = {key}\n    x1 = {xScale(xAxeTag[index]\n  )\n  }\n    y1 = {yScale(dataset.length + 1\n  )\n    -5\n  }\n    x2 = {xScale(xAxeTag[index]\n  )\n  }\n    y2 = {yScale(dataset.length + 1\n  )\n    +5\n  }\n    stroke = \"#0C3544\"\n    strokeWidth = \"2\"\n      >\n      </line>\n  )\n  }\n</g>\n\n  {/*Creating Data Point*/\n  }\n\n  {\n    Object.keys(data()).map((key, index) =>\n    < React.Fragment >\n    < OverlayTrigger\n    placement = \"right\"\n    overlay = {renderTooltip(index)}\n    delay = {\n    {\n      show: 100, hide\n    :\n      200\n    }\n  }\n  >\n  <g\n    id = {\"datapoint-\" +index}\n    onClick = {() => console.log(index)}>\n    /*Tags*/\n  <text\n    id = {\"tag-\"+index}\n    key = {key}\n    x = {initial.leftMargin / 3}\n    y = {yScale(index) + 2\n  }\n    fontSize = {initial.fontSize}\n    fill = \"#0C3544\"\n      >\n      {dataset[key].study}({dataset[key].Primary}, {dataset[key].Sequencing})\n      </text>\n\n      /* Intervals */\n      < line\n    id = {\"interval-\"+index}\n    x1 = {xScale(Number(dataset[key][\"95CI_low\"])\n  )\n  }\n    y1 = {yScale(index)}\n    x2 = {xScale(Number(dataset[key][\"95CI_high\"])\n  )\n  }\n    y2 = {yScale(index)}\n    stroke = \"#73848E\"\n    strokeWidth = \"2\" >\n\n      <title>\n      95\n    CI:({data()[key][\"95CI_low\"]}, {data()[key][\"95CI_high\"]})\n    </title>\n    </line>\n\n    /*Data point marks*/\n    <rect\n    id = {\"datPoint-\" +index}\n    x = {xScale(Number(dataset[key][\"coef\"])\n  )\n    -initial.edgeSize / 2\n  }\n    y = {yScale(index) - initial.edgeSize / 2\n  }\n    width = {initial.edgeSize}\n    height = {initial.edgeSize}\n    fill = \"#236e96\" >\n      </rect>\n      </g>\n      </OverlayTrigger>\n      </React.Fragment>\n  )\n  }\n  {/*Creating Diamond*/\n  }\n<polygon\n  id = \"diamond\"\n  points = {polygonPoints()}\n  fill = \"#F2950B\"\n    >\n    </polygon>\n    </svg>\n    </StyledHome>\n)\n}\n\nexport default ForestPlot;\n","/Users/mac/Documents/github/IOdb/client/src/example_output/sample-output.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/VolcanoPlot.js",["112","113"],"/* eslint-disable radix */\nimport React, {useState, useEffect} from 'react';\nimport Plotly from 'plotly.js-dist';\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport {withSize} from 'react-sizeme';\nimport colors from '../../styles/colors';\nimport * as d3 from 'd3';\n\nconst Plot = createPlotlyComponent(Plotly);\n\n// for changing the cursor on hover of points\nconst hover = () => {\n    d3.selectAll('.nsewdrag').style('cursor', 'pointer');\n};\n\nconst unhover = () => {\n    d3.selectAll('.nsewdrag').style('cursor', '');\n};\n\nconst VolcanoPlot = (props) => {\n    const {data, plotId, getForestPlotData, parameters, setParameters} = props;\n\n    const [plotData, setPlotData] = useState({\n        x: [], \n        y: [], \n        hovertext: [], \n        pointColor: [],\n        pointSize: []\n    });\n\n    const [selectedPointIndex, setSelectedPointIndex] = useState(null);\n\n    useEffect(() => {\n        console.log(data);\n        setPlotData({\n            x: data.map(item => (item.effect_size)),\n            y: data.map(item => (item.logPval)),\n            click_ids: data.map((item, i) => (i)),\n            hovertext: getHoverText(data),\n            pointColor: getPointColor(data),\n            pointSize: getPointSize(data),\n            pointLine: getPointOutline(data)\n        });\n    }, []);\n\n    useEffect(() => {\n        if(selectedPointIndex){\n            console.log(selectedPointIndex);\n            let pointColor = getPointColor(data, selectedPointIndex);\n            let pointLine = getPointOutline(data, selectedPointIndex);\n            setPlotData({\n                ...plotData, \n                pointColor: pointColor,\n                pointLine: pointLine\n            });\n        }\n    }, [selectedPointIndex]);\n\n    const onClick = (data) => {\n        let selectedPoint = props.data[data.points[0].pointIndex]\n        console.log(selectedPoint);\n        setSelectedPointIndex(data.points[0].pointIndex);\n        setParameters({...parameters, signature: selectedPoint.signature});\n        getForestPlotData({\n            signature: selectedPoint.signature, \n            outcome: selectedPoint.outcome, \n            model: selectedPoint.model\n        });\n    }\n\n    /**\n     * get data point sizes based on standard error value (se)\n     * @param {*} points \n     */\n    const getPointSize = (points) => {\n        let size = [];\n        points.forEach(point => {\n            if(point.se <= 0.05){\n                size.push(6);\n            }else if(point.se > 0.05 && point.se <= 0.1){\n                size.push(8);\n            }else if(point.se > 0.1 && point.se <= 0.15){\n                size.push(10);\n            }else if(point.se > 0.15){\n                size.push(12);\n            }\n        });\n        return size;\n    }\n\n    /**\n     * get data point color based on HR (effect size) value and -log10 p-value\n     * @param {*} points \n     */\n    const getPointColor = (points, index = null) => {\n        let pointColors = [];\n        for(let i = 0; i < points.length; i++){\n            if(i === index){\n                pointColors.push(colors.orange_highlight);\n                continue;\n            }\n\n            if(points[i].logPval < -Math.log10(0.05)){\n                pointColors.push(colors.gray_text);\n            }else{\n                if(points[i].effect_size > 0){\n                    pointColors.push(colors.red);\n                }else{\n                    pointColors.push(colors.blue);\n                }\n            }\n        }\n        return pointColors;\n    }\n\n    /**\n     * get data point outline.\n     * The outline is added if the point specified with the index is clicked.\n     * @param {*} points \n     * @param {*} index \n     */\n    const getPointOutline = (points, index=null) => {\n        let outlineColor = [];\n        let outlineWidth = [];\n        points.forEach((point, i) => {\n            if(i === index){\n                outlineColor.push(colors.gray_text);\n                outlineWidth.push(2);\n            }else{\n                outlineColor.push(undefined);\n                outlineWidth.push(0);\n            }\n        });\n        return { color: outlineColor, width: outlineWidth };\n    }\n\n    /**\n     * get formatted hovertext for each data point.\n     * @param {*} points \n     */\n    const getHoverText = (points) => {\n        let hoverText = [];\n        points.forEach(point => {\n            hoverText.push(\n            `Subgroup: ${point.subgroup}<br>Signature: ${point.signature}<br>Coef: ${Math.round(point.effect_size * 1000) / 1000}<br>P-value: ${Math.round(point.pval * 10000) / 10000}<br>I2: ${Math.round(point.i2 * 10000) / 10000}<br>P-value I2: ${Math.round(point.pval_i2 * 1000) / 1000}`)\n        });\n        return hoverText;\n    }\n\n    return(\n        <div>\n            <Plot\n                data={[\n                    {\n                        showlegend: false,\n                        type: 'scatter',\n                        mode: 'markers',\n                        x: plotData.x,\n                        y: plotData.y,\n                        click_ids: plotData.click_ids,\n                        hoverinfo: 'text',\n                        hovertext: plotData.hovertext,\n                        marker: {\n                            color: plotData.pointColor,\n                            size: plotData.pointSize,\n                            line: plotData.pointLine\n                        },\n                        name: 'points',\n                    }\n                ]}\n                layout={{\n                    width: props.size.width,\n                    height: props.size.width * 0.8,\n                    autosize: true,\n                    paper_bgcolor: 'white',\n                    plot_bgcolor: 'white',\n                    orientation: 'v',\n                    yaxis: { ticklen: 0, title: '-log10(p value)' },\n                    xaxis: { title: 'Hazard Ratio', zeroline: false },\n                    hovermode: 'closest',\n                    font: {\n                        size: 11,\n                        family: 'Noto Sans',\n                    },\n                    margin: {\n                        l: 45,\n                        r: 10,\n                        t: 10,\n                        b: 40,\n                    },\n                    shapes: [\n                        {\n                            type: 'line',\n                            xref: 'paper',\n                            x0: 0,\n                            y0: -Math.log10(0.05),\n                            x1: 1,\n                            y1: -Math.log10(0.05),\n                            line: {\n                                color: colors.light_gray,\n                                width: 2,\n                                dash: 'dot'\n                            }\n                        },\n                        {\n                            type: 'line',\n                            xref: 'x',\n                            yref: 'paper',\n                            x0: 0,\n                            y0: 0,\n                            x1: 0,\n                            y1: 1,\n                            line: {\n                                color: colors.light_gray,\n                                width: 2,\n                                dash: 'dot'\n                            }\n                        }\n                    ]\n                }}\n                graphDiv={plotId}\n                config={{\n                    responsive: true,\n                    displayModeBar: false,\n                }}\n                onClick={(data) => onClick(data)}\n                onHover={() => hover()}\n                onUnhover={() => unhover()}\n            />\n        </div>\n    );\n}\n\nexport default withSize()(VolcanoPlot);","/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot2.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/LinkButton.js",[],["114","115"],"/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/Layout.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/ActionButton.js",["116"],"import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport colors from '../../styles/colors';\n\nconst StyledButton = styled.button`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 5px;\n    border: none;\n    font-weight: normal;\n    letter-spacing: 1.5px;\n    width: ${props => props.style.width ? props.style.width : '45%'};\n    height: ${props => props.style.height ? props.style.height : '80px'};\n    background-color: ${props => props.disabled ? colors.light_gray : props.color.background};\n    font-size: ${props => props.style.fontSize ? props.style.fontSize : '20px'};\n    color: ${props => props.style.fontColor ? props.style.fontColor : '#ffffff'};\n    cursor: ${props => props.disabled ? 'default' : 'pointer'};\n\n    :hover {\n        background-color: ${ props => props.disabled ? colors.light_gray : props.color.hover };\n        outline: ${ props => props.color.hover };\n    }\n`;\n\nconst ActionButton = (props) => {\n    const {onClick, text, style} = props;\n    const [colorScheme, setColorScheme] = useState({\n        background: colors.blue,\n        hover: colors.hover_blue,\n        ready: false\n    });\n\n    useEffect(() =>{\n        switch(props.type) {\n            case 'reset':\n                setColorScheme({\n                    background: colors.red,\n                    hover: colors.hover_red,\n                    ready: true\n                });\n                break;\n            default:\n                setColorScheme({...colorScheme, ready: true});\n                break;\n        }\n    }, []);\n\n    return (\n        <React.Fragment>\n            {\n                colorScheme.ready &&\n                <StyledButton onClick={onClick} color={colorScheme} style={style} disabled={props.disabled} >\n                    {text}\n                </StyledButton>\n            }\n        </React.Fragment>\n    );\n}\n\nexport default ActionButton;","/Users/mac/Documents/github/IOdb/client/src/Components/Navigation/Navigation.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Footer/Footer.js",[],"/Users/mac/Documents/github/IOdb/client/src/styles/NavigationStyles.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Explore/VolcanoPlotInput.js",["117"],"/Users/mac/Documents/github/IOdb/client/src/Components/Diagram/ForestPlot3.js",["118"],"import React, {useEffect} from \"react\";\nimport * as d3 from 'd3';\nimport {withSize} from 'react-sizeme';\nimport styled from 'styled-components';\nimport colors from '../../styles/colors';\n\n/**\n * A responsive version of forest plot.\n * The plot rendering process is in 'draw()' function \n * which is called every time a window size changes.\n */\n\nconst Container = styled.div`\n    width: 100%;\n    height: 80%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    .tooltip {\n        position: absolute;\n        font-size: 11px; \n        background-color: rgba(242,255,223,0.8); \n        padding: 2px 10px; \n        color: rgb(7,28,44);\n        border-radius: 3;\n    }\n    .pointLink:hover {\n        text-decoration: underline;\n    }\n`\n\nconst ForestPlot = (props) => {\n\n    useEffect(() => {\n        draw();\n    }, [props.size.width, props.individuals]);\n\n    const draw = () => {\n        \n        const dim = {\n            width: props.size.width,\n            height: props.size.width\n        }\n\n        const initial = {\n            edgeSize: 8,\n            fontSize: 11,\n            xAxeMargin: 30,\n            topMargin: 20,\n            leftMargin: 200,\n            rightMargin: 10\n        }\n\n        /***\n         * Get the dataset (studies + overall value)\n         * keep the studies in data and the overall\n         **/\n        const dataset = props.individuals.concat(props.meta);\n        const overall = props.meta[0]\n\n        const data = () =>{\n            return props.individuals;\n        }\n\n        /***\n         * Find the min and max value of all studies for adjusting the scales and axes\n         ***/\n\n        const min_low = () => {\n            return Math.min(...dataset.map(function (d){ return Number(d[\"_95ci_low\"])}))\n        }\n        \n        const max_high = () => {\n            return Math.max(...dataset.map(function (d){ return Number(d[\"_95ci_high\"])}))\n        }\n        \n        /***\n         * Functions for scaling X and Y\n         ***/\n        \n        const xScale= (d) => {\n            const scale = d3\n                .scaleLinear()\n                .domain([min_low(), max_high()])\n                .range([initial.leftMargin, dim.width - initial.rightMargin])\n            return scale(d)\n        }\n        \n        const yScale= (d) => {\n            const scale = d3\n                .scaleLinear()\n                .domain([0, dataset.length + 1])\n                .range([20, 460])\n            return scale(d)\n        }\n        \n        /***\n         * Find the overall rhombus points on svg\n         ***/\n\n        const polygonPoints = () =>{\n            return (\n                xScale(Number(overall._95ci_low)) + \", \"+ yScale(dataset.length) +\" \"+\n                xScale(Number(overall.effect_size)) + \", \"+ (yScale(dataset.length) - (initial.edgeSize/2)) +\" \"+\n                xScale(Number(overall._95ci_high)) +\", \"+ yScale(dataset.length) +\" \"+\n                xScale(Number(overall.effect_size) ) +\", \"+ (yScale(dataset.length) + (initial.edgeSize/2)) +\" \"\n            )\n        }\n        \n        const xAxeTag = [min_low(), Math.round(overall.effect_size * 100) / 100, 0 , max_high()];\n\n        /***\n        * Mouseover data point group (text+interval+rect)\n        */\n        const renderToolTip = (key, id, point) => {\n            let tooltip = d3.select(`#${props.id}PlotContainer`)\n                    .append('div')\n                    .attr('id', id)\n                    .attr('class', 'tooltip')\n                    .style('left', `${xScale(1) + 10}px`)\n                    .style('top', `${yScale(key) - 30}px`);\n            if(point.study){\n                tooltip.html(\n                    point.study + \" (\" + point.primary_tissue + \"; \" + point.sequencing + \")\" +  \n                    \"<br />N=\" + point.n + \n                    \"<br />hazard ratio=\" + Number(point.effect_size).toFixed(4) + \n                    \"<br />P-value=\" + Number(point.pval).toFixed(4));\n            }else{\n                tooltip.html(\n                    \"Pooled Effect Size\" +  \n                    \"<br />N=\" + point.n + \n                    \"<br />hazard ratio=\" + Number(point.effect_size).toFixed(4) + \n                    \"<br />P-value=\" + Number(point.pval).toFixed(4));\n            }\n        }\n\n        const removeToolTip = (id) => {\n            d3.select(id).remove();\n        }\n\n        /**\n         *  start drawing plot\n         */\n\n        let svg = d3.select(`#${props.id}`);\n        svg.selectAll(\"*\").remove(); // redraw every time the width changes\n        svg.attr('width', dim.width).attr('height', dim.height);\n        let canvas = svg.append('g');\n        \n        /*Creating axes*/\n        canvas.append('line')\n            .attr('id', 'xAxe')\n            .attr('x1', xScale(min_low())-initial.leftMargin/2)\n            .attr('x2', xScale(max_high())+initial.xAxeMargin)\n            .attr('y1', yScale(dataset.length+1))\n            .attr('y2', yScale(dataset.length+1))\n            .style('stroke', \"#0C3544\")\n            .style('stroke-width', '1');\n\n        canvas.append('line')\n            .attr('id', 'yAxe')\n            .attr('x1', xScale(0))\n            .attr('x2', xScale(0))\n            .attr('y1', yScale(-2))\n            .attr('y2', yScale(dataset.length + 1))\n            .style('stroke', \"#0C3544\")\n            .style('stroke-width', '0.5');\n\n        canvas.append('line')\n            .attr('id', 'yAxe-dash')\n            .attr('x1', xScale(overall.effect_size))\n            .attr('x2', xScale(overall.effect_size))\n            .attr('y1', yScale(-2))\n            .attr('y2', yScale(dataset.length + 1))\n            .attr('stroke-dasharray', '3,4')\n            .style('stroke', \"#EF8020\")\n            .style('stroke-width', '0.5');\n\n        Object.keys(xAxeTag).forEach((key, index) => {\n            canvas.append('text')\n                .attr('id', \"xTag-\"+ index)\n                .attr('x', xScale(xAxeTag[index]))\n                .attr('y', yScale(dataset.length + 2))\n                .attr('font-size', initial.fontSize)\n                .attr('font-weight', 'regular')\n                .attr('fill', \"#0C3544\")\n                .attr('text-anchor', 'middle')\n                .text(xAxeTag[index])\n        });\n\n        Object.keys(xAxeTag).forEach((key, index) => {\n            canvas.append('line')\n                .attr('id', \"xAxeDash\"+ index)\n                .attr('x1', xScale(xAxeTag[index]))\n                .attr('x2', xScale(xAxeTag[index]))\n                .attr('y1', yScale(dataset.length+1) - 5)\n                .attr('y2', yScale(dataset.length+1) + 5)\n                .style('stroke', \"#0C3544\")\n                .style('stroke-width', '0.5');\n        });\n\n        canvas.append('text')\n            .attr('x', xScale(0))\n            .attr('y', yScale(dataset.length + 2.7))\n            .attr('font-size', initial.fontSize)\n            .attr('font-weight', 'regular')\n            .attr('fill', \"#0C3544\")\n            .attr('text-anchor', 'middle')\n            .text('Hazard Ratio')\n\n        /*Creating Data Point*/\n        Object.keys(props.individuals).forEach((key, index) => {\n\n            let tooltipId = `point-${dataset[key].study.replace(/[^a-zA-Z]/g, \"\")}`;\n            \n            let datapoint = svg.append('g')\n                .attr('id', \"datapoint-\" +index)\n                .style('cursor', 'arrow')\n                .on('click', () => console.log(index))\n                .on('mouseover', () => {\n                    renderToolTip(key, tooltipId, dataset[key]);\n                })\n                .on('mouseout', () => {\n                    removeToolTip(`#${tooltipId}`);\n                });\n            \n            datapoint.append('a')\n                .attr('id', \"tag-\"+index)\n                .attr('class', 'pointLink')\n                .attr('xlink:href', '/')\n                .append('text')\n                    .attr('x', 0)\n                    .attr('y', yScale(index))\n                    .attr('font-size', initial.fontSize)\n                    .attr('fill', \"#0C3544\")\n                    .text(`${dataset[key].study}(${dataset[key].primary_tissue}, ${dataset[key].sequencing})`);\n            \n            let line = datapoint.append('line')\n                .attr('id', \"interval-\" + index)\n                .attr('x1', xScale(Number(dataset[key][\"_95ci_low\"])))\n                .attr('x2', xScale(Number(dataset[key][\"_95ci_high\"])))\n                .attr('y1', yScale(index))\n                .attr('y2', yScale(index))\n                .style('stroke', \"#73848E\")\n                .style('stroke-width', '2');\n            line.append('title')\n                .text(`95CI:(${data()[key][\"_95ci_low\"]}, ${data()[key][\"_95ci_high\"]})`);\n            \n            datapoint.append('rect')\n                .attr('id', \"datPoint-\" +index)\n                .attr('x', xScale(Number(dataset[key][\"effect_size\"])) - initial.edgeSize / 2)\n                .attr('y', yScale(index) - initial.edgeSize / 2)\n                .style('width', initial.edgeSize)\n                .style('height', initial.edgeSize)\n                .style('fill', \"#236e96\");\n        });\n\n        /*Creating Diamond*/\n        let pooledEffect = svg.append('g')\n                .attr('id', 'pooled-effect')\n                .on('mouseover', () => {\n                    renderToolTip(dataset.length, 'polygon-tooltip', overall);\n                })\n                .on('mouseout', () => {\n                    removeToolTip('#polygon-tooltip');\n                });\n\n        pooledEffect.append('text')\n            .attr('id', \"tag-pooled-effect\")\n            .attr('x', 0)\n            .attr('y', yScale(dataset.length))\n            .attr('font-size', initial.fontSize)\n            .attr('fill', \"#0C3544\")\n            .text(`Pooled Effect Sizes`);\n\n        pooledEffect.append('polygon')\n            .attr('id', 'diamond')\n            .attr('points', polygonPoints())\n            .style('fill', colors.orange_highlight);\n    }\n\n    /***\n     * Creating the plot\n     ***/\n    return (\n        <Container id={`${props.id}PlotContainer`}>\n            <svg id={props.id}></svg>\n        </Container>\n    )\n}\n\nexport default withSize()(ForestPlot);\n","/Users/mac/Documents/github/IOdb/client/src/Components/Explore/VolcanoPlotContainer.js",[],"/Users/mac/Documents/github/IOdb/client/src/Components/Explore/ForestPlotContainer.js",["119","120"],"import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport CustomSelect from '../UtilComponents/CustomSelect';\nimport { FaSortAmountDown, FaSortAmountUpAlt } from \"react-icons/fa\";\nimport ForestPlot from '../Diagram/ForestPlot3';\n\nconst Container = styled.div`\n    width: 100%;\n`;\n\nconst PlotHeader = styled.div`\n    width: 100%;\n    display: flex;\n    align-items: center;\n    margin-bottom: 20px;\n    font-size: 12px;\n\n    .title {\n        font-weight: bold;\n    }\n\n    .parameterLine {\n        .value {\n            font-weight: bold;\n        }\n    }\n    \n    .filter {\n        display: flex;\n        flex: 30%;\n        align-items: center;\n        margin-left: 20px;\n        .label {\n            margin-right: 5px;\n        }\n        .dropdown {\n            flex: 30%;\n        }\n        .sortIconBtn {\n            font-size: 14px;\n            margin-left: 10px;\n            background: none;\n            border: none;\n            padding: 0;\n            cursor: pointer;\n            outline: none;\n        }\n    }\n\n    .effectSizeValues {\n        display: flex;\n        .valueLine {\n            margin-left: 15px;\n            .value {\n                margin-left: 5px;\n                font-weight: bold;\n            }\n        }\n    }\n`;\n\nconst ForestPlotContainer = (props) => {\n\n    const {parameters, forestPlotData} = props;\n    const [plotData, setPlotdata] = useState({ready: false, individuals: [], meta: []});\n    const [sort, setSort] = useState({value: 'effect_size', asc: true});\n    const [tissueValue, setTissueValue] = useState('ALL');\n    const [sequenceValue, setSequenceValue] = useState('ALL');\n\n    const [tissueOptions, setTissueOptions] = useState([]);\n    const [sequenceOptions, setSequenceOptions] = useState([]);\n    const sortOptions = [\n        {value: 'effect_size', label: 'Hazard Ratio'},\n        {value: 'study', label: 'Studies'},\n    ];\n\n    useEffect(() => {\n\n        let tmp = forestPlotData.data.meta.filter(item => item.subgroup === 'Tumor' && item.n >= 3);\n        tmp = tmp.map(item => ({value: item.tissue_type, label: item.tissue_type})).sort((a, b) => (a.label.localeCompare(b.label)));\n        tmp.unshift({value: 'ALL', label: 'All'});\n\n        setTissueOptions(tmp);\n        \n        tmp = forestPlotData.data.meta.filter(item => item.subgroup === 'Sequencing' && item.n >= 3);\n        tmp = tmp.map(item => ({value: item.tissue_type, label: item.tissue_type})).sort((a, b) => (a.label.localeCompare(b.label)));\n        tmp.unshift({value: 'ALL', label: 'All'});\n\n        setSequenceOptions(tmp);\n\n        setPlotdata({\n            individuals: [...forestPlotData.data.individuals].sort((a, b) => a[sort.value] - b[sort.value]),\n            meta: forestPlotData.data.meta.filter(item => item.tissue_type === 'ALL'),\n            ready: true\n        });\n        \n    }, []);\n\n    useEffect(() => {\n        let filterVal = 'ALL';\n        let individuals = [...forestPlotData.data.individuals];\n        let meta = [...forestPlotData.data.meta];\n\n        if(tissueValue !== 'ALL'){\n            individuals = individuals.filter(item => item.primary_tissue === tissueValue);\n            filterVal = tissueValue;\n            setSequenceValue('ALL');\n        }\n\n        if(sequenceValue !== 'ALL'){\n            individuals = individuals.filter(item => item.sequencing === sequenceValue);\n            filterVal = sequenceValue;\n            setTissueValue('ALL');\n        }\n\n        if(sort.value === 'effect_size'){\n            individuals.sort((a, b) => (sort.asc ? a[sort.value] - b[sort.value] : b[sort.value] - a[sort.value]));\n        }else{\n            individuals.sort((a, b) => a[sort.value] - b[sort.value]);\n            if(!sort.asc){\n                individuals.reverse();\n            }\n        }\n\n        individuals.sort((a, b) => (sort.asc ? a[sort.value] - b[sort.value] : b[sort.value] - a[sort.value]));\n        setPlotdata(prev => ({\n            ...prev, \n            individuals: individuals,\n            meta: meta.filter(item => item.tissue_type === filterVal)\n        }));\n    }, [sort, tissueValue, sequenceValue]);\n\n    return(\n        <div>\n            {\n                plotData.ready &&\n                <Container>\n                    <h3>Forest Plot</h3>\n                    <PlotHeader>\n                        <div className='parameterLine'>\n                            Signature: <span className='value'>{parameters.signature}</span>\n                        </div>\n                        <div className='filter'>\n                            <span className='label'>Sort By:</span>\n                            <CustomSelect \n                                className='dropdown' \n                                value={sortOptions.find(option => option.value === sort.value)}\n                                options={sortOptions}\n                                onChange={(e) => {setSort(prev => ({...prev, value: e.value}))}}\n                            />\n                            <button className='sortIconBtn' onClick={(e) => {setSort(prev => ({...prev, asc: !prev.asc}))}}>\n                                {\n                                    sort.asc ? <FaSortAmountDown /> : <FaSortAmountUpAlt />\n                                }\n                            </button>\n                        </div>\n                    </PlotHeader>\n                    <PlotHeader>\n                        <div className='title'>Filter By: </div>\n                        <div className='filter'>\n                            <span className='label'>Tissue Type:</span>\n                            <CustomSelect \n                                className='dropdown' \n                                value={tissueOptions.find(option => option.value === tissueValue)}\n                                options={tissueOptions}\n                                onChange={(e) => {setTissueValue(e.value)}}\n                                isDisabled={sequenceValue !== 'ALL'}\n                            />\n                        </div>\n                        <div className='filter'>\n                            <span className='label'>Sequencing Type:</span>\n                            <CustomSelect \n                                className='dropdown' \n                                value={sequenceOptions.find(option => option.value === sequenceValue)}\n                                options={sequenceOptions}\n                                onChange={(e) => {setSequenceValue(e.value)}}\n                                isDisabled={tissueValue !== 'ALL'}\n                            />\n                        </div>\n                    </PlotHeader>\n                    <PlotHeader>\n                        <div className='title'>Pooled Effect Sizes: </div>\n                        <div className='effectSizeValues'>\n                            <div className='valueLine'>P-value: <span className='value'>{Number(plotData.meta[0].pval).toFixed(3)}</span></div>\n                            <div className='valueLine'>Coef: <span className='value'>{Number(plotData.meta[0].se).toFixed(3)}</span></div>\n                            <div className='valueLine'>95CI Low: <span className='value'>{Number(plotData.meta[0]._95ci_low).toFixed(3)}</span></div>\n                            <div className='valueLine'>95CI High: <span className='value'>{Number(plotData.meta[0]._95ci_high).toFixed(3)}</span></div>\n                        </div>    \n                    </PlotHeader>\n                    <ForestPlot id='forestplot' individuals={plotData.individuals} meta={plotData.meta} />\n                </Container>\n            }\n        </div>\n    );\n}\n\nexport default ForestPlotContainer;\n","/Users/mac/Documents/github/IOdb/client/src/Components/UtilComponents/CustomSelect.js",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":64,"column":8,"nodeType":"127","endLine":64,"endColumn":10,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":2,"column":8,"nodeType":"131","messageId":"132","endLine":2,"endColumn":14},{"ruleId":"129","severity":1,"message":"133","line":6,"column":8,"nodeType":"131","messageId":"132","endLine":6,"endColumn":15},{"ruleId":"129","severity":1,"message":"134","line":7,"column":8,"nodeType":"131","messageId":"132","endLine":7,"endColumn":14},{"ruleId":"135","severity":1,"message":"136","line":41,"column":26,"nodeType":"137","messageId":"138","endLine":41,"endColumn":28},{"ruleId":"139","severity":1,"message":"140","line":260,"column":42,"nodeType":"141","endLine":262,"endColumn":3},{"ruleId":"139","severity":1,"message":"140","line":272,"column":14,"nodeType":"141","endLine":275,"endColumn":7},{"ruleId":"139","severity":1,"message":"140","line":292,"column":12,"nodeType":"141","endLine":295,"endColumn":5},{"ruleId":"125","severity":1,"message":"142","line":44,"column":8,"nodeType":"127","endLine":44,"endColumn":10,"suggestions":"143"},{"ruleId":"125","severity":1,"message":"144","line":57,"column":8,"nodeType":"127","endLine":57,"endColumn":28,"suggestions":"145"},{"ruleId":"121","replacedBy":"146"},{"ruleId":"123","replacedBy":"147"},{"ruleId":"125","severity":1,"message":"148","line":47,"column":8,"nodeType":"127","endLine":47,"endColumn":10,"suggestions":"149"},{"ruleId":"129","severity":1,"message":"150","line":5,"column":8,"nodeType":"131","messageId":"132","endLine":5,"endColumn":20},{"ruleId":"125","severity":1,"message":"151","line":36,"column":8,"nodeType":"127","endLine":36,"endColumn":45,"suggestions":"152"},{"ruleId":"125","severity":1,"message":"153","line":97,"column":8,"nodeType":"127","endLine":97,"endColumn":10,"suggestions":"154"},{"ruleId":"125","severity":1,"message":"155","line":131,"column":8,"nodeType":"127","endLine":131,"endColumn":42,"suggestions":"156"},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getVolcanoPlotData'. Either include it or remove the dependency array.","ArrayExpression",["159"],"no-unused-vars","'Layout' is defined but never used.","Identifier","unusedVar","'Tooltip' is defined but never used.","'Button' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["160"],"React Hook useEffect has missing dependencies: 'data' and 'plotData'. Either include them or remove the dependency array. You can also do a functional update 'setPlotData(p => ...)' if you only need 'plotData' in the 'setPlotData' call.",["161"],["157"],["158"],"React Hook useEffect has missing dependencies: 'colorScheme' and 'props.type'. Either include them or remove the dependency array. You can also do a functional update 'setColorScheme(c => ...)' if you only need 'colorScheme' in the 'setColorScheme' call.",["162"],"'CustomSelect' is defined but never used.","React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.",["163"],"React Hook useEffect has missing dependencies: 'forestPlotData.data.individuals', 'forestPlotData.data.meta', and 'sort.value'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPlotdata' needs the current value of 'sort.value'.",["164"],"React Hook useEffect has missing dependencies: 'forestPlotData.data.individuals' and 'forestPlotData.data.meta'. Either include them or remove the dependency array.",["165"],"no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},"Update the dependencies array to be: [getVolcanoPlotData]",{"range":"180","text":"181"},"Update the dependencies array to be: [data]",{"range":"182","text":"183"},"Update the dependencies array to be: [data, plotData, selectedPointIndex]",{"range":"184","text":"185"},"Update the dependencies array to be: [colorScheme, props.type]",{"range":"186","text":"187"},"Update the dependencies array to be: [props.size.width, props.individuals, draw]",{"range":"188","text":"189"},"Update the dependencies array to be: [forestPlotData.data.individuals, forestPlotData.data.meta, sort.value]",{"range":"190","text":"191"},"Update the dependencies array to be: [sort, tissueValue, sequenceValue, forestPlotData.data.individuals, forestPlotData.data.meta]",{"range":"192","text":"193"},[1943,1945],"[getVolcanoPlotData]",[1301,1303],"[data]",[1713,1733],"[data, plotData, selectedPointIndex]",[1595,1597],"[colorScheme, props.type]",[836,873],"[props.size.width, props.individuals, draw]",[2852,2854],"[forestPlotData.data.individuals, forestPlotData.data.meta, sort.value]",[4076,4110],"[sort, tissueValue, sequenceValue, forestPlotData.data.individuals, forestPlotData.data.meta]"]